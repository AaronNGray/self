Help!

or

What to do when things seem to be going wrong (in Self)



1. Take a deep breath, relax, and marvel that anything ever works right.


2. If you are going through the tutorial and are stuck and simply want
   to quit and try again you can:

   o  Use ps to find the Unix process ID, and do a "kill -9 <pid>", or
   o  Go to the shell window in which you started Self and type
      "quit" there.

   Then, just type Snapshot to start again.


3. If you get a greenish box that says "Process: <something>" at the top
   then that is a Self debugger. Try setting it down and pressing the "Abort"
   button on it to abort the Self-level process and dismiss the debugger.


4. If the system seems sluggish, try running with the
   spy open (I use it all the time). The spy will give you some hint
   about what is going on with the Virtual Machine and quickly lets you
   distinguish between deadlocks, crashes, and just long bouts of
   computation (which Self is not supposed to have, but nothing is
   perfect and it probably still does).  To start the spy:

   o Use the middle-button menu on the background to select "Toggle Spy", or

   o Type "spyOn" in the shell window you started Self from, or

   o Type "_Spy: true" in the shell window.


5. If the user interface seems to lock up:

   o Type "desktop go" in the shell window you started Self from, 
     or if that fails,

   o Type control-D in the shell window to get the "#" prompt, then
     type "prompt start".  


6. If you exit the desktop by mistake or it exits for you, type:

   o "desktop open" to open the desktop.


7. If you cannot start the desktop but need to save the snapshot, type:

   o "saveAs: <file-name-in-single-quotes>" to the shell window to
     save a snapshot. 


8. If you edit a method that is crucial to running the system,
   misspell a message (for instance "isAval" instead of "isAvail"),
   and thereby crash the UI so you cannot fix it, here is a clever workaround:

   o In the shell window type: 
     "lobby _Mirror addSlots: ( | isAval = (isAvail) | ) _Mirror"
     then type "prompt start" to restart things.
     Finally go fix the typo & then remove the isAval slot from the lobby.


9. If we haven't covered your situation, and odds are we haven't and
   I'm sorry, please send us a message at self-bugs@self.stanford.edu.
   It is amazing how hard it is to put yourself in the place of
   someone trying out a new system for the first time.
   I'm sure we have forgotten to explain a lot, so don't give up
   but please let us know what needs fixing.


Thanks!


The Self Group


Appendix: Known Bugs


1. Snapshot won't start (fatal error)

   Occasionally, the optimized code saved in a snapshot is corrupt,
   and prevents the snapshot from being reloaded.

     obj.$$ Snapshot

     Internal error: signal 11 code 1 addr 0x118 pc 0x139c48.

     Self process 5649 has crashed.  Do you want to:
	1) Quit Self (optionally attempting to write a snapshot)
	2) Try to print the Self stack
	3) Try to return to the Self prompt
	4) Force a core dump
     Your choice: 

   If this happens, use the -F option to the VM to discard the
   optimized code at startup time.

     obj.$$ Snapshot -F
   
             Welcome to the Self system!
     ...

   If after using this option the system appears to work, it is
   advisable to run the _Verify primitive immediately after startup.
   This runs checks on the heap and VM data structures for
   consistency.  If it reports any errors, do not continue to use the
   snapshot.  Sometimes it issues warnings; any that include the
   string "replCandidates" can be ignored.

   The `safe' output looks like this:

      "Self 0" _Verify
      verifying newgen: eden from to oldgen: old0 z p r S v O m N M i  done
      shell
      "Self 1"


2. Entire categories suddenly vanish from an outliner

   There is a compiler bug which cause one of the outliner methods to
   fail when the degree of inlining gets beyond a certain point.  To
   workaround this, you can discard the generated code using the
   primitive _Flush.


3. Debugger bugs

   Editing code in a process that failed due being out of stack causes a
   fatal error when the debugger attempts to cut the stack back.

   Using the return: command in the console debugs causes a fatal error.


4. Profiler

   The profiler has a number of associated VM bugs, which may cause the
   VM to crash after its use.  Hence, make sure you have saved code
   before using the profiler.


5. Parser behaves strangely with large integers

   The parser does not reject integers which are too large to be
   smallInts, instead it generates an incorrect number.


6. Dying X server takes Self with it

   If your X server exits while a Self window is open, the Self VM is
   also dies.


7. Console ceases to accept input

   Sometime, for no apparent reason, the message
	   Error: EINVAL while trying to read file "<stdin>".
	   Receiver is: traits unixFile stdin.
   will appear in the console, after which the prompt will no longer
   accept input.  You can break out by typing ^C, quitting the scheduler,
   and restarting.


