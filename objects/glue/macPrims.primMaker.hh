/* This information was generated by the primitive maker (primitiveMaker.self).
Please do not change it manually. -- dmu 12/91  */\
\
# ifdef INTERFACE_PRAGMAS
# pragma interface
# endif

/* Copyright 1992-2012 AUTHORS.  */\
\
/* See the LICENSE file for license information.  */\
\
# define macOS_entries \
\
{ "open_wrapbasicOpenFileNameFlags:Mode:ResultProxy:", \
fntype(&open_wrap_BasicOpenFileName_Flags_Mode__glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "close_wrapbasicCloseFile", \
fntype(&close_wrap_BasicCloseFile__glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "read_wrapbasicReadFileInto:Offset:Count:", \
fntype(&read_wrap_BasicReadFile_Into_Offset_Count__glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
true, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
true, /* can walk stack         */ \
true, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
/* Set canAWS so a read can be interrupted and returned to prompt  */\
\
{ "write_wrapbasicWriteFileInto:Offset:Count:", \
fntype(&write_wrap_BasicWriteFile_Into_Offset_Count__glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "get_SIOUX_nonblocking_primget_SIOUX_nonblocking", \
fntype(&get_SIOUX_nonblocking_prim_Get_SIOUX_nonblocking_glue), \
ExternalPrimitive, \
BooleanPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "set_SIOUX_nonblocking_primset_SIOUX_nonblocking", \
fntype(&set_SIOUX_nonblocking_prim_Set_SIOUX_nonblocking__glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "rename_wrapbasicRenameTo:", \
fntype(&rename_wrap_BasicRename_To__glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "unlinkbasicUnlink", \
fntype(&unlink_BasicUnlink__glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "MYSELFsetFdResultProxy:", \
fntype(&MYSELF_SetFd__glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "MYSELFfileDescriptor", \
fntype(&MYSELF_FileDescriptor_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "ExpandDir_primexpand", \
fntype(&ExpandDir_prim_Expand__glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
/* C++ cannot deal with struct stat, so we assume typedef struct stat stat_t;  */\
\
{ "stat_t_newnewResultProxy", \
fntype(&stat_t_new_New_glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_t_deletedelete", \
fntype(&stat_t_delete_Delete_glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_t_st_modest_mode", \
fntype(&stat_t_st_mode_St_mode_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_t_st_inost_ino", \
fntype(&stat_t_st_ino_St_ino_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_t_st_devst_dev", \
fntype(&stat_t_st_dev_St_dev_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_t_st_nlinkst_nlink", \
fntype(&stat_t_st_nlink_St_nlink_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_t_st_uidst_uid", \
fntype(&stat_t_st_uid_St_uid_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_t_st_gidst_gid", \
fntype(&stat_t_st_gid_St_gid_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_t_st_rdevst_rdev", \
fntype(&stat_t_st_rdev_St_rdev_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_t_st_sizest_size", \
fntype(&stat_t_st_size_St_size_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_t_st_blksizest_blksize", \
fntype(&stat_t_st_blksize_St_blksize_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_t_st_blocksst_blocks", \
fntype(&stat_t_st_blocks_St_blocks_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_st_atime_wrapperst_atime", \
fntype(&stat_st_atime_wrapper_St_atime_glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_st_mtime_wrapperst_mtime", \
fntype(&stat_st_mtime_wrapper_St_mtime_glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_st_ctime_wrapperst_ctime", \
fntype(&stat_st_ctime_wrapper_St_ctime_glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "statbasicStatFileNameInto:", \
fntype(&stat_BasicStatFileName_Into__glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "fstatbasicStatOpenFileInto:", \
fntype(&fstat_BasicStatOpenFile_Into__glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "throw_exception_primthrowException", \
fntype(&throw_exception_prim_ThrowException_glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \


/* This information was generated by the primitive maker (primitiveMaker.self).
Please do not change it manually. -- dmu 12/91  */\
\
# pragma interface

/* Copyright 1992-2012 AUTHORS.  */\
\
/* See the LICENSE file for license information.  */\
\
# define macOS_glue    \
\
 C_func_3( proxy_or_errno,(int,MacOS_File_seal,-1), open_wrap, open_wrap_BasicOpenFileName_Flags_Mode__glue, , string,, int,, int,) \
 C_func_1( int_or_errno,-1, close_wrap, close_wrap_BasicCloseFile__glue, , proxy_null,(int,MacOS_File_seal)) \
 C_func_4( int_or_errno,-1, read_wrap, read_wrap_BasicReadFile_Into_Offset_Count__glue, fail, proxy_null,(int,MacOS_File_seal), bv_len,char*, int,, int,) \
/* Set canAWS so a read can be interrupted and returned to prompt  */\
\
 C_func_4( int_or_errno,-1, write_wrap, write_wrap_BasicWriteFile_Into_Offset_Count__glue, fail, proxy_null,(int,MacOS_File_seal), cbv_len,char*, int,, int,) \
 C_func_0( bool,, get_SIOUX_nonblocking_prim, get_SIOUX_nonblocking_prim_Get_SIOUX_nonblocking_glue, ) \
 C_func_1( void,, set_SIOUX_nonblocking_prim, set_SIOUX_nonblocking_prim_Set_SIOUX_nonblocking__glue, , bool,) \
 C_func_2( int_or_errno,-1, rename_wrap, rename_wrap_BasicRename_To__glue, fail, string,, string,) \
 C_func_1( specific_success_int,0, unlink, unlink_BasicUnlink__glue, , string,) \
 C_func_1( proxy_null,(int,MacOS_File_seal), MYSELF, MYSELF_SetFd__glue, , int,) \
 C_func_1( int,, MYSELF, MYSELF_FileDescriptor_glue, , proxy_null,(int,MacOS_File_seal)) \
 C_func_1( string,, ExpandDir_prim, ExpandDir_prim_Expand__glue, fail, string,) \
/* C++ cannot deal with struct stat, so we assume typedef struct stat stat_t;  */\
\
 CC_new_0( proxy,(stat_t*,stat_t_seal), stat_t, stat_t_new_New_glue) \
 CC_delete( proxy,(stat_t*,stat_t_seal), stat_t_delete_Delete_glue) \
 C_get_comp( unsigned_long,, proxy,(stat_t*,stat_t_seal), .st_mode, stat_t_st_mode_St_mode_glue) \
 C_get_comp( unsigned_long,, proxy,(stat_t*,stat_t_seal), .st_ino, stat_t_st_ino_St_ino_glue) \
 C_get_comp( unsigned_long,, proxy,(stat_t*,stat_t_seal), .st_dev, stat_t_st_dev_St_dev_glue) \
 C_get_comp( short,, proxy,(stat_t*,stat_t_seal), .st_nlink, stat_t_st_nlink_St_nlink_glue) \
 C_get_comp( unsigned_long,, proxy,(stat_t*,stat_t_seal), .st_uid, stat_t_st_uid_St_uid_glue) \
 C_get_comp( unsigned_long,, proxy,(stat_t*,stat_t_seal), .st_gid, stat_t_st_gid_St_gid_glue) \
 C_get_comp( unsigned_long,, proxy,(stat_t*,stat_t_seal), .st_rdev, stat_t_st_rdev_St_rdev_glue) \
 C_get_comp( long,, proxy,(stat_t*,stat_t_seal), .st_size, stat_t_st_size_St_size_glue) \
 C_get_comp( long,, proxy,(stat_t*,stat_t_seal), .st_blksize, stat_t_st_blksize_St_blksize_glue) \
 C_get_comp( long,, proxy,(stat_t*,stat_t_seal), .st_blocks, stat_t_st_blocks_St_blocks_glue) \
 C_func_1( oop,, stat_st_atime_wrapper, stat_st_atime_wrapper_St_atime_glue, , proxy,(stat_t*,stat_t_seal)) \
 C_func_1( oop,, stat_st_mtime_wrapper, stat_st_mtime_wrapper_St_mtime_glue, , proxy,(stat_t*,stat_t_seal)) \
 C_func_1( oop,, stat_st_ctime_wrapper, stat_st_ctime_wrapper_St_ctime_glue, , proxy,(stat_t*,stat_t_seal)) \
 C_func_2( int_or_errno,-1, stat, stat_BasicStatFileName_Into__glue, , string,, proxy,(stat_t*,stat_t_seal)) \
 C_func_2( int_or_errno,-1, fstat, fstat_BasicStatOpenFile_Into__glue, , proxy_null,(int,MacOS_File_seal), proxy,(stat_t*,stat_t_seal)) \
 C_func_0( void,, throw_exception_prim, throw_exception_prim_ThrowException_glue, ) \


